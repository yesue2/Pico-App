package com.yesue2.pico.ui.views

import android.widget.Toast
import androidx.compose.foundation.background
import androidx.compose.foundation.clickable
import androidx.compose.foundation.layout.Arrangement
import androidx.compose.foundation.layout.Box
import androidx.compose.foundation.layout.Column
import androidx.compose.foundation.layout.Row
import androidx.compose.foundation.layout.Spacer
import androidx.compose.foundation.layout.fillMaxSize
import androidx.compose.foundation.layout.fillMaxWidth
import androidx.compose.foundation.layout.height
import androidx.compose.foundation.layout.padding
import androidx.compose.foundation.layout.size
import androidx.compose.foundation.layout.width
import androidx.compose.foundation.layout.wrapContentHeight
import androidx.compose.foundation.lazy.LazyColumn
import androidx.compose.foundation.shape.RoundedCornerShape
import androidx.compose.material3.Icon
import androidx.compose.material3.MaterialTheme
import androidx.compose.material3.Scaffold
import androidx.compose.material3.Switch
import androidx.compose.material3.SwitchDefaults
import androidx.compose.material3.Text
import androidx.compose.runtime.Composable
import androidx.compose.runtime.LaunchedEffect
import androidx.compose.runtime.collectAsState
import androidx.compose.runtime.getValue
import androidx.compose.runtime.mutableStateOf
import androidx.compose.runtime.remember
import androidx.compose.runtime.setValue
import androidx.compose.ui.Alignment
import androidx.compose.ui.Modifier
import androidx.compose.ui.graphics.Color
import androidx.compose.ui.platform.LocalContext
import androidx.compose.ui.res.painterResource
import androidx.compose.ui.text.font.FontWeight
import androidx.compose.ui.unit.dp
import androidx.compose.ui.unit.sp
import androidx.hilt.navigation.compose.hiltViewModel
import androidx.navigation.NavController
import com.yesue2.pico.R
import com.yesue2.pico.data.monthly.MonthlyGoalEntity
import com.yesue2.pico.ui.components.CardBox
import com.yesue2.pico.ui.components.ProgressGridContainer
import com.yesue2.pico.ui.components.SummitButton
import com.yesue2.pico.ui.components.TopAppBarDetail
import com.yesue2.pico.ui.theme.BackBlue
import com.yesue2.pico.ui.theme.BackGreen
import com.yesue2.pico.ui.theme.BackPink
import com.yesue2.pico.ui.theme.BackYellow
import com.yesue2.pico.viewmodel.MonthlyGoalViewModel
import java.text.SimpleDateFormat
import java.util.Date
import java.util.Locale

@Composable
fun GoalDetailScreen(
    navController: NavController,
    goalId: Int,
    viewModel: MonthlyGoalViewModel = hiltViewModel()
) {
    LaunchedEffect(goalId) {
        viewModel.loadGoalById(goalId)
    }

    val goal = viewModel.selectedGoal.collectAsState().value

    // ÏûêÎèô ÏßÑÌñâ Î∞©Ïãù ÏóÖÎç∞Ïù¥Ìä∏ Ïã§Ìñâ
    LaunchedEffect(goal?.trackingMethod) {
        if (goal != null && goal.trackingMethod in listOf("Îß§Ïùº 1 ÏûêÎèô Ï¶ùÍ∞Ä", "Î™©ÌëúÏóê ÎßûÏ∂∞ ÏûêÎèô Í≥ÑÏÇ∞")) {
            viewModel.updateProgressAutomatically(goal)
        }
    }

    Scaffold(
        topBar = {
            TopAppBarDetail(
                screen = "Detail",
                onBackClick = {
                    navController.popBackStack()
                }
            )
        },
    ) { paddingValues ->
        LazyColumn(
            modifier = Modifier
                .fillMaxSize()
                .padding(paddingValues)
                .padding(16.dp)
                .background(MaterialTheme.colorScheme.background),
        ) {
            item {
                goal?.let { DetailGoalListSection(it, navController) } ?: Text(
                    text = "Î™©Ìëú Ï†ïÎ≥¥Î•º Î∂àÎü¨Ïò§Îäî Îç∞ Ïã§Ìå®ÌñàÏäµÎãàÎã§. \nÎí§Î°úÍ∞ÄÍ∏∞Î•º ÎàåÎü¨Ï£ºÏÑ∏Ïöî",
                    fontSize = 16.sp,
                    color = MaterialTheme.colorScheme.error
                )
            }
        }
    }
}

@Composable
fun DetailGoalListSection(
    goal: MonthlyGoalEntity,
    navController: NavController
) {
    Column(
        modifier = Modifier
            .fillMaxWidth()
            .wrapContentHeight()
            .padding(vertical = 8.dp)
    ) {
        Text(
            text = "Î™©Ìëú ÏûêÏÑ∏Ìûà Î≥¥Í∏∞",
            fontSize = 20.sp,
            fontWeight = FontWeight.Bold,
            color = MaterialTheme.colorScheme.onBackground
        )

        Spacer(modifier = Modifier.height(16.dp))

        DetailGoalForm(goal, navController)
    }
}

@Composable
fun DetailGoalForm(
    goal: MonthlyGoalEntity,
    navController: NavController,
    viewModel: MonthlyGoalViewModel = hiltViewModel()
) {
    CardBox(txt = "Ïù¥Î≤à Îã¨ Î™©Ìëú, ÏñºÎßàÎÇò Ìï¥ÎÉàÏùÑÍπåÏöî?") {
        Column(
            modifier = Modifier
                .fillMaxWidth()
                .wrapContentHeight()
                .padding(10.dp)
        ) {
            TitleAndDate(goal)

            Spacer(modifier = Modifier.height(20.dp))

            ProgressMessage(goal)

            Spacer(modifier = Modifier.height(20.dp))

            // "ÏßÑÌñâÎ•† ÌëúÏãú ÏóÜÏùå"Ïù¥ ÏïÑÎãê Í≤ΩÏö∞ ÏûêÎèô ÏßÑÌñâÎèÑ Ï¶ùÍ∞Ä Ïã§Ìñâ
            if (goal.trackingMethod in listOf("Îß§Ïùº 1 ÏûêÎèô Ï¶ùÍ∞Ä", "Î™©ÌëúÏóê ÎßûÏ∂∞ ÏûêÎèô Í≥ÑÏÇ∞")) {
                LaunchedEffect(goal.trackingMethod) {
                    viewModel.updateProgressAutomatically(goal)
                }
            }

            // ‚úÖ "ÏßÑÌñâÎ•† Í∏∞Î°ù Ïïà ÌïòÍ∏∞"Í∞Ä ÏïÑÎãê Í≤ΩÏö∞ÏóêÎßå ÏßÑÌñâÎèÑ UI ÌëúÏãú
            if (goal.trackingMethod != "ÏßÑÌñâÎ•† Í∏∞Î°ù Ïïà ÌïòÍ∏∞") {
                ProgressGridContainer(goal, viewModel)
                Spacer(modifier = Modifier.height(20.dp))
            }

            // ÏôÑÎ£å Ïó¨Î∂ÄÏôÄ Î≤ÑÌäº
            GoalCompletionSection(goal, navController)
        }
    }
}

@Composable
fun TitleAndDate(goal: MonthlyGoalEntity) {
    val dDay = calculateDday(goal.endDate)

    val (iconResId, backgroundColor) = when (goal.category) {
        1 -> R.drawable.ic_company to BackBlue
        2 -> R.drawable.ic_personal to BackPink
        3 -> R.drawable.ic_shopping to BackYellow
        4 -> R.drawable.ic_study to BackGreen
        5 -> R.drawable.ic_friend to BackBlue
        6 -> R.drawable.ic_invest to BackYellow
        7 -> R.drawable.ic_health to BackGreen
        8 -> R.drawable.ic_hobby to BackPink
        9 -> R.drawable.ic_housework to BackPink
        10 -> R.drawable.ic_etc to BackYellow
        else -> R.drawable.ic_etc to Color.LightGray
    }

    Row(
        modifier = Modifier
            .fillMaxWidth()
            .padding(vertical = 8.dp),
        horizontalArrangement = Arrangement.SpaceBetween,
        verticalAlignment = Alignment.CenterVertically
    ) {
        Row(
            modifier = Modifier.weight(1f),
            verticalAlignment = Alignment.CenterVertically
        ) {
            Box(
                modifier = Modifier
                    .size(50.dp)
                    .background(color = backgroundColor, shape = MaterialTheme.shapes.medium),
                contentAlignment = Alignment.Center
            ) {
                Icon(
                    painter = painterResource(id = iconResId),
                    contentDescription = null,
                    modifier = Modifier.size(24.dp),
                    tint = Color.Unspecified
                )
            }
            Spacer(modifier = Modifier.width(15.dp))
            Column(
                modifier = Modifier.weight(1f)
            ) {
                Text(
                    text = goal.title,
                    fontSize = 18.sp,
                    fontWeight = FontWeight.Bold,
                    color = MaterialTheme.colorScheme.secondary
                )
                Text(
                    text = "${formatDate(goal.startDate)}Î∂ÄÌÑ∞\n${formatDate(goal.endDate)}ÍπåÏßÄ",
                    fontSize = 14.sp,
                    color = MaterialTheme.colorScheme.secondary.copy(alpha = 0.8f)
                )
            }
        }
        Text(
            text = dDay,
            fontSize = 14.sp,
            fontWeight = FontWeight.Bold,
            color = MaterialTheme.colorScheme.primary
        )
    }
}

@Composable
fun ProgressMessage(goal: MonthlyGoalEntity) {
    val remaining = goal.goalAmount - goal.progress

    // Ïò§Îäò ÎÇ†Ïßú (Î∞ÄÎ¶¨Ï¥à Îã®ÏúÑ)ÏôÄ ÏãúÏûë ÎÇ†Ïßú Ï∞®Ïù¥ Í≥ÑÏÇ∞
    val currentTime = System.currentTimeMillis()
    val elapsedDays = ((currentTime - goal.startDate) / (1000 * 60 * 60 * 24)).toInt() + 1

    Text(
        text = when {
            elapsedDays <= 0 -> "ÏïÑÏßÅ Î™©Ìëú ÏãúÏûë Ï†ÑÏù¥ÏóêÏöî! üå±\nÍ≥ß ÏãúÏûëÎê† Ï±åÎ¶∞ÏßÄÎ•º Í∏∞ÎåÄÌï¥Î¥êÏöî!"
            remaining > 0 -> "${elapsedDays}Ïùº ÎèôÏïà Î≤åÏç® ${goal.progress}${goal.unit} ÏôÑÎ£åÌñàÏñ¥Ïöî!\nÎÇ®ÏùÄ ${remaining}${goal.unit}ÍπåÏßÄ Î™®Îëê Îã¨ÏÑ±Ìï¥Î¥êÏöî! ÌôîÏù¥ÌåÖ‚ú®"
            else -> "üéâ Î™©ÌëúÎ•º Î™®Îëê Îã¨ÏÑ±ÌñàÏñ¥Ïöî! ÎåÄÎã®Ìï¥Ïöî! üéâ"
        },
        fontSize = 14.sp,
        color = MaterialTheme.colorScheme.onPrimary
    )
}


@Composable
fun ProgressGrid(currentProgress: Int, goalAmount: Int) {
    Column(horizontalAlignment = Alignment.CenterHorizontally) {
        Row(
            modifier = Modifier.fillMaxWidth(),
            horizontalArrangement = Arrangement.spacedBy(4.dp)
        ) {
            repeat(goalAmount) { index ->
                Box(
                    modifier = Modifier
                        .size(24.dp)
                        .background(
                            color = if (index < currentProgress) MaterialTheme.colorScheme.primary else Color(
                                0xFFFFE582
                            ),
                            shape = RoundedCornerShape(5.dp)
                        )
                )
            }
        }
    }
}


@Composable
fun GoalCompletionSection(
    goal: MonthlyGoalEntity,
    navController: NavController,
    viewModel: MonthlyGoalViewModel = hiltViewModel()
) {
    val context = LocalContext.current
    var isSwitchChecked by remember { mutableStateOf(goal.isCompleted) }

    Column(
        modifier = Modifier.fillMaxWidth(),
        verticalArrangement = Arrangement.spacedBy(10.dp)
    ) {
        Text(
            text = "Î™©ÌëúÎ•º Î™®Îëê Îã¨ÏÑ±ÌñàÎÇòÏöî?",
            fontSize = 16.sp,
            fontWeight = FontWeight.Bold,
            color = MaterialTheme.colorScheme.secondary
        )
        Row(
            modifier = Modifier.fillMaxWidth(),
            verticalAlignment = Alignment.CenterVertically,
            horizontalArrangement = Arrangement.SpaceBetween
        ) {
            Switch(
                checked = isSwitchChecked,
                onCheckedChange = { isCompleted ->
                    isSwitchChecked = isCompleted
                    viewModel.completeGoal(goal, isCompleted)
                    val updatedProgress = if (isCompleted && goal.trackingMethod == "ÏßÑÌñâÎ•† Í∏∞Î°ù Ïïà ÌïòÍ∏∞") {
                        goal.goalAmount // ‚úÖ ÏôÑÎ£å Ïãú Î™©Ìëú ÏàòÎüâÏúºÎ°ú ÏßÑÌñâÎ•† Î≥ÄÍ≤Ω
                    } else if (!isCompleted && goal.trackingMethod == "ÏßÑÌñâÎ•† Í∏∞Î°ù Ïïà ÌïòÍ∏∞") {
                        0 // ‚úÖ ÎØ∏ÏôÑÎ£å Ïãú ÏßÑÌñâÎ•†ÏùÑ Îã§Ïãú 0ÏúºÎ°ú
                    } else {
                        goal.progress // ‚úÖ Îã§Î•∏ Î∞©ÏãùÏùò Í≤ΩÏö∞ Í∏∞Ï°¥ Í∞í Ïú†ÏßÄ
                    }

                    val updatedGoal = goal.copy(
                        isCompleted = isCompleted,
                        progress = updatedProgress
                    )

                    viewModel.updateGoal(updatedGoal)
                },

                colors = SwitchDefaults.colors(
                    checkedThumbColor = Color.White, // ÌôúÏÑ± ÏÉÅÌÉú Î≤ÑÌäº(Ïõê) ÏÉâÏÉÅ
                    uncheckedThumbColor = MaterialTheme.colorScheme.tertiary, // ÎπÑÌôúÏÑ± ÏÉÅÌÉú Î≤ÑÌäº(Ïõê) ÏÉâÏÉÅ
                    checkedTrackColor = Color(0xFFFFD54F), // ÌôúÏÑ± ÏÉÅÌÉú Ìä∏Îûô ÏÉâÏÉÅ (ÎÖ∏ÎûÄÏÉâ)
                    uncheckedTrackColor = Color(0xFFDFEAF2), // ÎπÑÌôúÏÑ± ÏÉÅÌÉú Ìä∏Îûô ÏÉâÏÉÅ (Ïó∞ÌååÎûÄÏÉâ)
                    checkedBorderColor = Color.Transparent,
                    uncheckedBorderColor = Color.Transparent
                )
            )
            Text(
                text = "ÎÑ§! Î™©ÌëúÎ•º ÏôÑÎ≤ΩÌûà Ìï¥ÎÉàÏñ¥Ïöî! \uD83C\uDF89",
                fontSize = 16.sp,
                modifier = Modifier.padding(end = 30.dp),
                color = MaterialTheme.colorScheme.onSecondary
            )
        }

        Spacer(modifier = Modifier.height(10.dp))

        Box(
            contentAlignment = Alignment.Center,
            modifier = Modifier
                .padding(top = 20.dp)
                .fillMaxWidth()
        ) {
            Text(
                text = "Ïù¥ Î™©Ìëú ÏÇ≠Ï†úÌïòÍ∏∞",
                fontSize = 14.sp,
                fontWeight = FontWeight.Bold,
                color = MaterialTheme.colorScheme.primary,
                modifier = Modifier
                    .padding(bottom = 8.dp)
                    .clickable {
                        viewModel.deleteGoalById(goal.id)
                        Toast.makeText(
                            context,
                            "Î™©ÌëúÍ∞Ä ÏÇ≠Ï†úÎêòÏóàÏñ¥Ïöî! Îã§Ïùå Î™©ÌëúÎèÑ ÌôîÏù¥ÌåÖ! \uD83D\uDCAA",
                            Toast.LENGTH_SHORT
                        ).show()
                        navController.popBackStack()
                    }
            )
        }

        Box(
            contentAlignment = Alignment.Center,
            modifier = Modifier
                .padding(top = 10.dp)
                .fillMaxWidth()
        ) {
            SummitButton(content = "Back to list") {
                navController.popBackStack()
            }
        }
    }
}

// ÎÇ†Ïßú Ìè¨Îß∑ Î≥ÄÌôò Ìï®Ïàò
fun formatDate(timestamp: Long): String {
    val sdf = SimpleDateFormat("yyyyÎÖÑ MMÏõî ddÏùº", Locale.getDefault())
    return sdf.format(Date(timestamp))
}

fun calculateDday(endDate: Long): String {
    val currentDate = System.currentTimeMillis() / (1000 * 60 * 60 * 24)
    val endDateDays = endDate / (1000 * 60 * 60 * 24)
    val daysRemaining = (endDateDays - currentDate).toInt()

    return when {
        daysRemaining > 0 -> "D-$daysRemaining"
        daysRemaining == 0 -> "Ïò§Îäò ÎßàÍ∞ê"
        else -> "Í∏∞Ìïú ÏßÄÎÇ®"
    }
}